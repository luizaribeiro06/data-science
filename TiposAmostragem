#amostragem
#passo 1 - vamos criar o bd (a população da amostra)

import pandas as pd
import numpy as np

#criando um dataframe fictício
np.random.seed(42) # garante a reprodução do experimento, varia a escolha dos números de 42 em 42 vezes, 
n = 10000 # qtd de clientes que queremos gerar os dados - numero de linhas

#matriz com comandos que gera de forma aleatoria
#nome dataframe - df (exemplo)

df = pd.DataFrame({
    "ID": range(1, n+1), # dentro de um intervalo de 1 a n+1, lembrando q não é índice pois o índice começa no 0 as always
    "Idade": np.random.randint(18, 65, n), #randint - numeros inteiros de forma aleatoria
    "Renda": np.random.randint(2000, 3000, n), #(menor, maior e qts vezes (a variavel de qtd))
    "Regiao": np.random.choice(["Norte", "Sul", "Leste", "Oeste"], n) #choice: pode escolher opções
})

#amostra de 5 linhas da tabela criada
df.sample(5)

#amostragem aleatória simples (sem critério nenhum)
#criando uma tabela que puxa os dados do dataframe(escolhe qtd de linhas e escolhe a variação)
amostra_simples = df.sample(n=1000, random_state=42) #random_stade tem a mesma função do seed
amostra_simples.head() #só o começo da tabela

#amostragem aleatória sistemática (pega as linhas com base na variação)
#garante que não tenha nenhuma escolha preferida ex:verificação natura
intervalo = np.random.randint(1, 50) #inicio e intervalo
#cria-se a tabela baseada nesse intervalo
amostra_sistematica = df.iloc[::intervalo, :]#sempre que tiver intervalo será assim
amostra_sistematica.head()

site: https://scikit-learn.org/stable/ 
#amostragem estratificada (separa de acordo com o parâmetro escolhido)
#split - separação
from sklearn.model_selection import train_test_split
#cria-se a tabela, criando uma estratififação, tendo o dataframe, testando a amostra de 0.5 e estratifica por regiao
#ele vai pegar uma amostragem equivalente de acordo com as regioes, ele vai pegar 0.5 de forma proporcional em cada regiao
amostra_estratificada, _ = train_test_split(df, test_size=0.5, stratify=df["Regiao"])
amostra_estratificada.head()

#amostragem por conglomerado - cluster
#pega TODOS daquele parametro
clusters = df.groupby('Regiao') #vai ser um agrupamento por região
amostra_conglomerados = clusters.get_group('Sul')
amostra_conglomerados.head()

#amostragem por conveniência - só pega o que escolher e for conveniente
#ex: perfil no instagram - premio para os primeiros 1000 seguidores
#sempre por ordenação
amostra_conveniencia = df.head(1000)
amostra_conveniencia.head()
